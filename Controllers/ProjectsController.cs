using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace DemoMVC.Controllers
{
    public class ProjectsController : Controller
    {
        // GET: Projects
        public ActionResult Index()
        {
            return View();
        }

        public ActionResult LearnJavaScript()
        {
            return View();
        }

        public ActionResult EulerExamples()
        {
            return View();
        }

        //ach new term in the Fibonacci sequence is generated by adding the previous two terms. 
        //By starting with 1 and 2, the first 10 terms will be:1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        public JsonResult sumEvenFibonacci(int maxTerm)
        {
            Stack<double> fibSeq = new Stack<double>();
            Queue<double> fibQueue = new Queue<double>();
            //initial 1, 2

            Stack<double> fibEvenSeq = new Stack<double>();
            Stack<double> fibOddSeq = new Stack<double>();

            double evenSumFibSeq = 0;

            double newFibNumber = 0;

            if(maxTerm ==1)
            {
                evenSumFibSeq = 0;
            }
            else if (maxTerm == 2)
            {
                evenSumFibSeq = 2;
            }
            else
            {
                fibOddSeq.Push(1);
                fibSeq.Push(1);
                fibQueue.Enqueue(1);

                fibEvenSeq.Push(2);
                fibSeq.Push(2);
                fibQueue.Enqueue(2);

                while (fibSeq.Peek() < maxTerm)
                {
                    if (fibQueue.Count() >= 2)
                    {
                        newFibNumber = fibQueue.Dequeue();
                        newFibNumber += fibQueue.Peek();

                        if (newFibNumber % 2 == 0)
                        {
                            fibEvenSeq.Push(newFibNumber);
                        }
                        else
                        {
                            fibOddSeq.Push(newFibNumber);
                        }

                        fibSeq.Push(newFibNumber);
                        fibQueue.Enqueue(newFibNumber);
                    }
                    else
                    {
                        throw new ArgumentException("Need 2 previous term for new Fibonacci number.");
                    }
                }

                evenSumFibSeq = fibEvenSeq.Sum();
            }

            return Json(evenSumFibSeq, JsonRequestBehavior.AllowGet);
        }

        public JsonResult multiple3And5Method(int multiple3And5)
        {
            int answer = 0;
            for(int i = 1;i<multiple3And5;i++)
            {
                if(i%3==0 | i%5==0)
                {
                    answer += i;
                }
            }

            return Json(answer, JsonRequestBehavior.AllowGet);
        }
    }
}